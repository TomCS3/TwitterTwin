{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","tweetsEl"],"mappings":"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","file":"static/js/main.9909bc44.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, {useEffect, useState}  from 'react'\n\nimport {loadTweets} from '../lookup'\n\nexport function TweetsComponent(props) {\n  const textAreaRef = React.createRef()\n  const [newTweets, setNewTweets] = useState([])\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift({\n      content: newVal,\n      likes: 0,\n      id: 123\n    })\n    setNewTweets(tempNewTweets)\n    textAreaRef.current.value = ''\n  }\n  return <div className={props.className}>\n    <div className='col-12 mb-3'>\n      <form onSubmit={handleSubmit}>\n        <textarea ref={textAreaRef} required={true} className='form-control'>\n\n        </textarea>\n        <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n      </form>\n      </div>\n    <TweetsList newTweets={newTweets} />\n    </div>\n}\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    useEffect(() => {\n      const final = [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length) {\n        setTweets(final)\n      }\n    }, [props.newTweets, tweets, tweetsInit])\n    useEffect(() => {\n      const myCallback = (response, status) => {\n        if (status === 200){\n          setTweetsInit(response) \n        } else {\n          alert(\"There was an error\")\n        }\n      }\n      loadTweets(myCallback)\n    },[tweetsInit])\n    return tweets.map((item, index)=>{\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n    })\n  }\n\nexport function ActionBtn(props) {\n    const {tweet, action} = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleClick = (event) => {\n      event.preventDefault()\n      if (action.type === 'like') {\n        if (userLike === true) {\n          setLikes(likes - 1)\n          setUserLike(false)\n        }\n        else{\n          setLikes(likes + 1)\n          setUserLike(true)\n        }\n      }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n }\n  \nexport function Tweet(props) {\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n      <p>{tweet.id} - {tweet.content}</p>\n      <div className='btn btn-group'>\n        <ActionBtn tweet={tweet} action={{type: \"like\", display:\"Likes\"}} />\n        <ActionBtn tweet={tweet} action={{type: \"unlike\", display:\"Unlikes\"}} />\n        <ActionBtn tweet={tweet} action={{type: \"retweet\", display:\"Retweet\"}} />\n      </div>\n    </div>\n  }","export function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET' // \"POST\"\n    const url = \"http://127.0.0.1:8000/api/tweets/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function () {\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n      console.log(e)\n      callback({\"message\": \"The request was an errow\"}, 400)\n    }\n    xhr.send()\n  }","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from'./tweets'\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {TweetsComponent} from './tweets';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\n\nconst tweetsEl = document.getElementById('twittertwin')\nif (tweetsEl) {\n  ReactDOM.render(<TweetsComponent />, tweetsEl);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}