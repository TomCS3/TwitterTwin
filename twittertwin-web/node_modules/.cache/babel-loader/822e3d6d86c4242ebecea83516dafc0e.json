{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/tom/Dev/CompSci/cs50/WebProgramming/TwitterClone/TwitterTwin/twittertwin-web/src/tweets/components.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\n\nfunction loadTweets(callback) {\n  const xhr = new XMLHttpRequest();\n  const method = 'GET'; // \"POST\"\n\n  const url = \"http://127.0.0.1:8000/api/tweets/\";\n  const responseType = \"json\";\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    console.log(e);\n    callback({\n      \"message\": \"The request was an errow\"\n    }, 400);\n  };\n\n  xhr.send();\n}\n\nexport function TweetsList(props) {\n  _s();\n\n  const [tweets, setTweets] = useState([]);\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      if (status === 200) {\n        setTweets(response);\n      } else {\n        alert(\"There was an error\");\n      }\n    };\n\n    loadTweets(myCallback);\n  }, []);\n  return tweets.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(Tweet, {\n      tweet: item,\n      className: \"my-5 py-5 border bg-white text-dark\"\n    }, `${index}-{item.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 14\n    }, this);\n  });\n}\n\n_s(TweetsList, \"tlPhWtKxaAnAviYMgoNvFaAwXFo=\");\n\n_c = TweetsList;\nexport function ActionBtn(props) {\n  const {\n    tweet,\n    action\n  } = props;\n  const className = props.className ? props.className : 'btn btn-primary btn-sm';\n  return action.type === 'like' ? /*#__PURE__*/_jsxDEV(\"button\", {\n    className: className,\n    children: [\" \", tweet.likes, \" Likes\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 37\n  }, this) : null;\n}\n_c2 = ActionBtn;\nexport function Tweet(props) {\n  const {\n    tweet\n  } = props;\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [tweet.id, \" - \", tweet.content]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn btn-group\",\n      children: /*#__PURE__*/_jsxDEV(ActionBtn, {\n        tweet: tweet,\n        action: {\n          type: \"like\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n}\n_c3 = Tweet;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TweetsList\");\n$RefreshReg$(_c2, \"ActionBtn\");\n$RefreshReg$(_c3, \"Tweet\");","map":{"version":3,"sources":["/Users/tom/Dev/CompSci/cs50/WebProgramming/TwitterClone/TwitterTwin/twittertwin-web/src/tweets/components.js"],"names":["React","loadTweets","callback","xhr","XMLHttpRequest","method","url","responseType","open","onload","response","status","onerror","e","console","log","send","TweetsList","props","tweets","setTweets","useState","useEffect","myCallback","alert","map","item","index","ActionBtn","tweet","action","className","type","likes","Tweet","id","content"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,QAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACA,QAAMC,MAAM,GAAG,KAAf,CAF0B,CAEL;;AACrB,QAAMC,GAAG,GAAG,mCAAZ;AACA,QAAMC,YAAY,GAAG,MAArB;AACAJ,EAAAA,GAAG,CAACI,YAAJ,GAAmBA,YAAnB;AACAJ,EAAAA,GAAG,CAACK,IAAJ,CAASH,MAAT,EAAiBC,GAAjB;;AACAH,EAAAA,GAAG,CAACM,MAAJ,GAAa,YAAY;AACvBP,IAAAA,QAAQ,CAACC,GAAG,CAACO,QAAL,EAAeP,GAAG,CAACQ,MAAnB,CAAR;AACD,GAFD;;AAGAR,EAAAA,GAAG,CAACS,OAAJ,GAAc,UAAUC,CAAV,EAAa;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAX,IAAAA,QAAQ,CAAC;AAAC,iBAAW;AAAZ,KAAD,EAA0C,GAA1C,CAAR;AACD,GAHD;;AAIAC,EAAAA,GAAG,CAACa,IAAJ;AACD;;AAEH,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAC9B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBC,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMC,UAAU,GAAG,CAACb,QAAD,EAAWC,MAAX,KAAsB;AACvC,UAAIA,MAAM,KAAK,GAAf,EAAmB;AACjBS,QAAAA,SAAS,CAACV,QAAD,CAAT;AACD,OAFD,MAEO;AACLc,QAAAA,KAAK,CAAC,oBAAD,CAAL;AACD;AACF,KAND;;AAOAvB,IAAAA,UAAU,CAACsB,UAAD,CAAV;AACD,GATQ,EASP,EATO,CAAT;AAUA,SAAOJ,MAAM,CAACM,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,KAAe;AAC/B,wBAAO,QAAC,KAAD;AAAO,MAAA,KAAK,EAAED,IAAd;AAAoB,MAAA,SAAS,EAAC;AAA9B,OAA0E,GAAEC,KAAM,YAAlF;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,CAAP;AAGD;;GAhBaV,U;;KAAAA,U;AAkBhB,OAAO,SAASW,SAAT,CAAmBV,KAAnB,EAA0B;AAC7B,QAAM;AAACW,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAkBZ,KAAxB;AACA,QAAMa,SAAS,GAAGb,KAAK,CAACa,SAAN,GAAkBb,KAAK,CAACa,SAAxB,GAAoC,wBAAtD;AACA,SAAOD,MAAM,CAACE,IAAP,KAAgB,MAAhB,gBAAyB;AAAQ,IAAA,SAAS,EAAED,SAAnB;AAAA,oBAAgCF,KAAK,CAACI,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,UAAzB,GAAuF,IAA9F;AACD;MAJaL,S;AAMhB,OAAO,SAASM,KAAT,CAAehB,KAAf,EAAsB;AACzB,QAAM;AAACW,IAAAA;AAAD,MAAUX,KAAhB;AACA,QAAMa,SAAS,GAAGb,KAAK,CAACa,SAAN,GAAkBb,KAAK,CAACa,SAAxB,GAAoC,yBAAtD;AACA,sBAAO;AAAK,IAAA,SAAS,EAAEA,SAAhB;AAAA,4BACL;AAAA,iBAAIF,KAAK,CAACM,EAAV,SAAiBN,KAAK,CAACO,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,YADK,eAEL;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,KAAK,EAAEP,KAAlB;AAAyB,QAAA,MAAM,EAAE;AAACG,UAAAA,IAAI,EAAE;AAAP;AAAjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFK;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAMD;MATaE,K","sourcesContent":["import React from 'react'\n\nfunction loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET' // \"POST\"\n    const url = \"http://127.0.0.1:8000/api/tweets/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function () {\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n      console.log(e)\n      callback({\"message\": \"The request was an errow\"}, 400)\n    }\n    xhr.send()\n  }\n  \nexport function TweetsList(props) {\n    const [tweets, setTweets] = useState([])\n  \n    useEffect(() => {\n      const myCallback = (response, status) => {\n        if (status === 200){\n          setTweets(response) \n        } else {\n          alert(\"There was an error\")\n        }\n      }\n      loadTweets(myCallback)\n    },[])\n    return tweets.map((item, index)=>{\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n    })\n  }\n\nexport function ActionBtn(props) {\n    const {tweet, action} = props\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    return action.type === 'like' ? <button className={className}> {tweet.likes} Likes</button> : null\n  }\n  \nexport function Tweet(props) {\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n      <p>{tweet.id} - {tweet.content}</p>\n      <div className='btn btn-group'>\n        <ActionBtn tweet={tweet} action={{type: \"like\"}} />\n      </div>\n    </div>\n  }"]},"metadata":{},"sourceType":"module"}